install.packages("snpnet")
library("devtools")
install_github("junyangq/snpnet")
install_github("junyangq/glmnetPlus")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
configs <- list(
# results.dir = "PATH/TO/SAVE/DIR",  # needed when saving intermediate results
# save = TRUE,  # save intermediate results per iteration (default FALSE)
# nCores = 16,  # number of cores available (default 1)
# niter = 100,  # max number of iterations (default 50)
# prevIter = 15,  # if we want to start from some iteration saved in results.dir
# use.glmnetPlus = TRUE,  # recommended for faster computation
# early.stopping = FALSE,  # whether to stop based on validation performance (default TRUE)
plink2.path = "plink2",   # path to plink2 program
zstdcat.path = "/usr/bin/zstdcat"  # path to zstdcat program
)
# check if the provided paths are valid
for (name in names(configs)) {
tryCatch(system(paste(configs[[name]], "-h"), ignore.stdout = T),
condition = function(e) cat("Please add", configs[[name]], "to PATH, or modify the path in the configs list.")
)
}
configs <- list(
# results.dir = "PATH/TO/SAVE/DIR",  # needed when saving intermediate results
# save = TRUE,  # save intermediate results per iteration (default FALSE)
# nCores = 16,  # number of cores available (default 1)
# niter = 100,  # max number of iterations (default 50)
# prevIter = 15,  # if we want to start from some iteration saved in results.dir
# use.glmnetPlus = TRUE,  # recommended for faster computation
# early.stopping = FALSE,  # whether to stop based on validation performance (default TRUE)
plink2.path = "~/bin/plink2",   # path to plink2 program
zstdcat.path = "/opt/homebrew/bin/zstdcat"  # path to zstdcat program
)
# check if the provided paths are valid
for (name in names(configs)) {
tryCatch(system(paste(configs[[name]], "-h"), ignore.stdout = T),
condition = function(e) cat("Please add", configs[[name]], "to PATH, or modify the path in the configs list.")
)
}
genotype.pfile <- file.path("/Users/kengchichang/Downloads/snpnet-master/inst/extdata", "sample")
vars <- dplyr::mutate(dplyr::rename(data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst'))), 'CHROM'='#CHROM'), VAR_ID=paste(ID, ALT, sep='_'))$VAR_ID
vars
configs[["excludeSNP"]] <- base::intersect(configs[["excludeSNP"]], vars)
pvar <- pgenlibr::NewPvar(paste0(genotype.pfile, '.pvar.zst'))
pgen <- list()
for(s in splits) pgen[[s]] <- pgenlibr::NewPgen(paste0(genotype.pfile, '.pgen'), pvar=pvar, sample_subset=match(ids[[s]], ids[['psam']]))
pgen[[s]] <- pgenlibr::NewPgen(paste0(genotype.pfile, '.pgen'), pvar=pvar, sample_subset=match(ids[[s]], ids[['psam']]))
genotype.pfile <- file.path("/Users/kengchichang/Downloads/", "CEU_chr19")
vars <- dplyr::mutate(dplyr::rename(data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst'))), 'CHROM'='#CHROM'), VAR_ID=paste(ID, ALT, sep='_'))$VAR_ID
genotype.pfile <- file.path("/Users/kengchichang/Downloads/snpnet-master/inst/extdata", "sample")
vars <- dplyr::mutate(dplyr::rename(data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst'))), 'CHROM'='#CHROM'), VAR_ID=paste(ID, ALT, sep='_'))$VAR_ID
vars
data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst')))
genotype.pfile <- file.path("/Users/kengchichang/Downloads", "CEU_chr19")
data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst')))
genotype.pfile <- file.path("/Users/kengchichang/Downloads/snpnet-master/inst/extdata", "sample")
data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst')))
genotype.pfile <- file.path("/Users/kengchichang/Downloads", "CEU_chr19")
data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst')))
vars <- dplyr::mutate(dplyr::rename(data.table::fread(cmd=paste0(configs[['zstdcat.path']], ' ', paste0(genotype.pfile, '.pvar.zst'))), 'CHROM'='#CHROM'), VAR_ID=paste(ID, ALT, sep='_'))$VAR_ID
configs[["excludeSNP"]] <- base::intersect(configs[["excludeSNP"]], vars)
pvar <- pgenlibr::NewPvar(paste0(genotype.pfile, '.pvar.zst'))
pgen <- list()
pgen[[s]] <- pgenlibr::NewPgen(paste0(genotype.pfile, '.pgen'), pvar=pvar, sample_subset=match(ids[[s]], ids[['psam']]))
pgenlibr::ClosePvar(pvar)
install.packages("bigsnpr")
library("bigsnpr")
# Reading the bedfile and storing the data in temporary directory
bedfile = "/Users/kengchichang/Library/CloudStorage/Dropbox/GitHub/cse-284-prs-comparison/data/test_data/CEU_chr19_normed.bed"
rds <- snp_readBed(bedfile, backingfile = tempfile())
# Loading the data from backing files
test <- snp_attach(rds)
str(test)
dim(G <- test$genotypes)
G[1:8, 1:8]
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
library("devtools")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
install_github("chrchang/plink-ng", subdir="/2.0/pgenlibr")
install.packages("Rcpp")
install.packages("Rcpp")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
library("devtools")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
install_github("chrchang/plink-ng", subdir="/2.0/pgenlibr")
install_github("chrchang/plink-ng", subdir="/2.0/cindex")
